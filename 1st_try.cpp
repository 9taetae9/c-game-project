#include <windows.h>//윈도우 용 수많은 함수들을 정의 (COORD, SetConsoleCursorPosition(), GetStdHandle())
#include <stdio.h>//표준입출력 라이브러리 
#include <conio.h>/* 콘솔 입출력 함수를 제공하는 헤더 파일
getch()함수  */ 
 
// 게임 환경 변수
#define MAX_DDONG       100 // 똥의 최대 개수.

#define LEVEL_COUNT     3   // 레벨마다 늘어날 똥개수
#define LEVEL_SPEED     15  // 레벨마다 빨라질 스피드 (1000 = 1초, 15 = 0.015초)
// 똥 구조체.
int score = 0;
char choose;
struct DDONG{
    int x, y, wait;
};
// 화면의 특정 위치로 이동해 주는 함수.
void gotoxy(int x, int y){
    COORD Pos = {x, y};//X,Y 좌표는 화면 버퍼 문자 셀의 열과 행.  
    /*COORD coord;
    coord.X=x;
    coord.Y=y;
    
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
	
	*/
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE)/*콘솔 화면 버퍼에 대한 핸들 */, Pos/*새 커서 위치를\
	지정하는 COORD 구조체*/);//지정된 콘솔 화면 버퍼에서 커서 위치를 설정하는 함수 
}
// 키입력 함수
BOOL IsKeyDown(int Key){
	return ((GetAsyncKeyState(Key) & 0x8000) != 0);
}

// 게임 함수.
int game(int level){
	system("Color F0");
    struct DDONG ddong[MAX_DDONG], user;
    int i, key, check = 1, evade = 0;
    int speed = 75 - level * LEVEL_SPEED;
    int count = 5 + level * LEVEL_COUNT;
    // 레벨업에 필요한 똥개수
    int levelup = 20 + level * 20;
    // 똥개수 체크. (최대값을 넘지 않도록 조정)
    if( count >= MAX_DDONG ) count = MAX_DDONG - 1;
    // 스피드 체크. (최소값이 10 보다 작지 않도록 저정)
    if( speed < 10 ) speed = 10;
    // 유저 시작 위치.
    user.x = 12;
    user.y = 19;
    // 똥 초기화.
    for(i=0; i<count; i++)
    {
        ddong[i].x = rand() % 24 + 1;
        ddong[i].y = 3;
        ddong[i].wait = rand() % 20;
    }
    // 게임 루프
    while(check)
    {
		score ++;
        // 스피드에 따른 시연 지연.
        Sleep(speed);
        // 화면 지우기.
        system("cls");
        // 게임 환경 출력.
		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),0xf0);
        printf("[똥피하기게임]\tLEVEL %d\n점수 : %d", level,score);
		gotoxy(0,user.y+3);	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),0x00);
		printf("ㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁ");
		printf("ㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁ");
        // 사람 움직임 처리
		if (IsKeyDown(VK_LEFT))
		{
			if(user.x > 1)
			{
				user.x--;
				if(IsKeyDown(VK_DOWN))
					user.x--;
			}
		}
		if (IsKeyDown(VK_RIGHT))
		{
			if(user.x <= 23)
			{
				user.x++;
				if(IsKeyDown(VK_DOWN) && user.x <= 22)
					user.x++;
			}
		}
        // 사람 출력
        gotoxy(user.x, user.y);
		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),0xf0);
        printf("ㅇ");
		gotoxy(user.x, user.y+1);
		printf("ㅅ");
		gotoxy(user.x, user.y+2);
		printf("ㅅ");
        // 똥 움직임 처리
        for(i=0; i<count; i++)
        {
            if( ddong[i].wait > 0 )
            {
                // 대기시간 동안 아직 똥을 떨어뜨리지 않는다.
                ddong[i].wait--;
            }
            else
            {
                // 똥을 한칸 아래로 이동한다.
                ddong[i].y++;
                // 똥이 최하단에 도착 했을 때 처리.
                if( ddong[i].y >= 22 )
                {
                    ddong[i].x = rand() % 24 + 1;
                    ddong[i].y = 3;
                    evade++;    // 피한 똥개수 카운트
                }
                // 똥 출력
                gotoxy(ddong[i].x, ddong[i].y);
				SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),0xf5);
                printf("＠");
                // 충돌 체크
                if( abs(ddong[i].x - user.x) < 2 && ddong[i].y == user.y )
                {
                    // 비프음 출력.
                    printf("\a");
                    check = 0;
                }
            }
        }
        // 피한 똥개수가 20개면 레벨업.
        if(evade > levelup)
			return 1;
    }
    return 2;
}
// 메인 함수
int main()
{
	system("mode con: cols=26 lines=25"); 
    int level = 1;

	system("Color 0A");
	gotoxy(6,1);
	printf("[똥피하기게임]");
	gotoxy(6,11);
	printf("1: 게임시작");
	gotoxy(6,12);
	printf("2:  가이드");
	gotoxy(6,13);
	printf("3:  끝내기");
	gotoxy(0,24);
	printf(" ");

	choose = _getch();

	if (choose == '1')
	{
		choose == '0';
		while(1)
		{
			// 화면 지우기.
			system("cls");
			system("Color 0A");
			// 레벨 표시.
			gotoxy(6,1); printf("[똥피하기게임]");
			gotoxy(9,11); printf("LEVEL %d", level); 
			// 시간 지연 (1초 = 1000)
			Sleep(1500);
			// 게임 시작.
			if( game(level) == 2 )
			{
				system("cls");
				gotoxy(8, 5);
				system("Color 0F");
				SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),0x0D);
				printf("게임 오버\n");
				SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),0x0A);
				gotoxy(8, 12);
				printf("레벨 : %d", level);
				gotoxy(8, 13);
				printf("점수 : %d", score);
				gotoxy(8, 22);
				printf("1: 메인메뉴");
				gotoxy(8, 23);
				printf("2: 끝내기");
				gotoxy(0, 24);
				printf(" ");

				do
				{
					choose = _getch();
					if (choose == '1')
						main();
					if (choose == '2')
						break;
				} while(1);
				break;
			}
			else
				level++;
		}
	}
	else if (choose == '2')
	{
		choose = '0';
		system("cls");
		system("Color 0A");
		gotoxy(6,1);
		printf("[똥피하기게임]");
		gotoxy(10,8);
		printf("조작법");
		gotoxy(3,10);
		printf("이동   : 좌,우 화살표");
		gotoxy(3,11);
		printf("부스터 : 아래 화살표");
		gotoxy(8,23);
		printf("1: 돌아가기");
		gotoxy(0,24);
		printf(" ");

		while(choose != '1')
		{
			choose = _getch();
		}
		main();
	}
	else
		return 0;
}
